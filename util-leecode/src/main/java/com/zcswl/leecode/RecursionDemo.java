package com.zcswl.leecode;

/**
 * 递归思想
 * 1， 明确这个函数是想要干什么
 * 2， 寻找递归的结束条件
 *      所谓递归，就是会在函数内部代码中，调用这个函数本身，
 *      所以，我们必须要找出递归的结束条件，不然的话，会一直调用自己，
 *      进入无底洞。也就是说，我们需要找出当参数为啥时，递归结束，之后直接把结果返回，
 *      请注意，这个时候我们必须能根据这个参数的值，能够直接知道函数的结果是什么。
 * 3， 找出函数的等价关系式
 *      第三要素就是，我们要不断缩小参数的范围，缩小之后，我们可以通过一些辅助的变量或者操作，使原函数的结果不变。
 *          这个等价关系式的寻找，可以说是最难的一步了，如果你不大懂也没关系，因为你不是天才，你还需要多接触几道题，
 *          我会在接下来的文章中，找 10 道递归题，让你慢慢熟悉起来。
 *
 * @author zhoucg
 * @date 2021-04-12 14:18
 */
public class RecursionDemo {

    // 计算n的阶乘
    static int f(int n) {
        if (n == 0) {
            return 0;
        }
        if (n <= 2) {
            return n;
        }
        // 函数的等价关系式
        return n * f(n-1);
    }

    // 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
    static int a(int n) {
        if (n <= 2) {
            return n;
        }
        // 找出对应的等价关系式
        // 第一种跳法：第一次我跳了一个台阶，那么还剩下n-1个台阶还没跳，剩下的n-1个台阶的跳法有f(n-1)种。
        //  第二种跳法：第一次跳了两个台阶，那么还剩下n-2个台阶还没，剩下的n-2个台阶的跳法有f(n-2)种。
        return a(n-1) + a(n-2);

    }


    public static void main(String[] args) {
        int n = 3;
        int a = a(3);
        System.out.println(a);
    }

}
