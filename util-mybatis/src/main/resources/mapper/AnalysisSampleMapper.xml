<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zcswl.mybatis.mapper.AnalysisSampleMapper">
  <resultMap id="BaseResultMap" type="com.zcswl.mybatis.entity.AnalysisSampleDO">
    <id column="id" jdbcType="BIGINT" property="id"/>
    <result column="job_id" jdbcType="BIGINT" property="jobId"/>
    <result column="config_id" jdbcType="INTEGER" property="configId"/>
    <result column="config_name" jdbcType="VARCHAR" property="configName"/>
    <result column="schema" jdbcType="VARCHAR" property="schema"/>
    <result column="table_name" jdbcType="VARCHAR" property="tableName"/>
    <result column="column_name" jdbcType="VARCHAR" property="columnName"/>
    <result column="technical_id" jdbcType="INTEGER" property="technicalId"/>
    <result column="technical_name" jdbcType="VARCHAR" property="technicalName"/>
    <result column="technical_determine" jdbcType="VARCHAR" property="technicalDetermine"/>
    <result column="min_length" jdbcType="INTEGER" property="minLength"/>
    <result column="max_length" jdbcType="INTEGER" property="maxLength"/>
    <result column="first_letter" jdbcType="VARCHAR" property="firstLetter"/>
    <result column="type_definition" jdbcType="VARCHAR" property="typeDefinition"/>
    <result column="business_id" jdbcType="INTEGER" property="businessId"/>
    <result column="business_name" jdbcType="VARCHAR" property="businessName"/>
    <result column="level" jdbcType="INTEGER" property="level"/>
    <result column="business_determine" jdbcType="VARCHAR" property="businessDetermine"/>
    <result column="remark" jdbcType="VARCHAR" property="remark"/>
    <result column="service_name" jdbcType="VARCHAR" property="serviceName"/>
    <result column="encryption" jdbcType="TINYINT" property="encryption"/>
    <result column="rule_collection" jdbcType="VARCHAR" property="ruleCollection"/>
    <result column="biz_id" jdbcType="BIGINT" property="bizId"/>
    <result column="biz_name" jdbcType="VARCHAR" property="bizName"/>
    <result column="meta_id" jdbcType="BIGINT" property="metaId"/>
    <result column="classify_id" jdbcType="BIGINT" property="classifyId"/>
  </resultMap>


  <update id="updateBatch">
    UPDATE `analysis_sample` sample set sample.classify_id = #{classifyId} where id IN
    <foreach collection="ids" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </update>

  <update id="xx">
    update analysis_sample set  classify_id = 0 where id IN
    <foreach collection="ids" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </update>

  <update id="yyy">
    update analysis_sample set classify_id = 1000 where job_id = #{jobId} and config_id = #{configId}
  </update>

  <update id="zzz">
    update analysis_sample set classify_id = 10 where id = #{id} and job_id = #{jobId}
  </update>

  <update id="ppp">
    update analysis_sample set classify_id = 10 where job_id = #{jobId} and classify_id = 0
  </update>

  <select id="saveClassifyId">
    UPDATE `analysis_sample` sample
    INNER JOIN `sys_classify_data` da ON sample.biz_id = da.biz_id
    SET sample.classify_id = da.id
    WHERE sample.job_id = #{jobId} AND sample.classify_id = 0
  </select>

  <select id="searchClassifyId" resultType="com.zcswl.mybatis.entity.Select">
      SELECT
        sample.id as code,
        da.id as `value`
    FROM
    `analysis_sample` sample
    INNER JOIN `sys_classify_data` da ON sample.biz_id = da.biz_id
    WHERE sample.job_id = #{jobId} AND sample.classify_id = 0
  </select>

  <update id="updateClassifId" parameterType="list">
    update analysis_sample
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="classify_id =case" suffix="end,">
        <foreach collection="list" item="i" index="index">
          <if test="i.code!=null">
            when id=#{i.code} then #{i.value}
          </if>
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach collection="list"  item="i" index="index" open="(" separator="," close=")">
      #{i.code}
    </foreach>
  </update>


</mapper>
